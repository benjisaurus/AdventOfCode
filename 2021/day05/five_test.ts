import { assertEquals } from "https://deno.land/std@0.116.0/testing/asserts.ts";
import { getFive,getInput,getMaxs,initGrid,
    markGrid,countGrid,diagNums,markDiagonal } from "./five.ts";

Deno.test("get five", () => {
    assertEquals(5, getFive());
})

Deno.test("get input", () => {
    const res = getInput("sample.txt");
    const expected = [
        [ [ 0, 9 ], [ 5, 9 ] ],
        [ [ 8, 0 ], [ 0, 8 ] ],
        [ [ 9, 4 ], [ 3, 4 ] ],
        [ [ 2, 2 ], [ 2, 1 ] ],
        [ [ 7, 0 ], [ 7, 4 ] ],
        [ [ 6, 4 ], [ 2, 0 ] ],
        [ [ 0, 9 ], [ 2, 9 ] ],
        [ [ 3, 4 ], [ 1, 4 ] ],
        [ [ 0, 0 ], [ 8, 8 ] ],
        [ [ 5, 5 ], [ 8, 2 ] ]
      ];
    assertEquals(expected, res);
})

Deno.test("get Maxs", () => {
    const input = [
        [ [ 0, 9 ], [ 5, 9 ] ],
        [ [ 8, 0 ], [ 0, 8 ] ],
        [ [ 9, 4 ], [ 3, 4 ] ],
        [ [ 2, 2 ], [ 2, 1 ] ],
        [ [ 7, 0 ], [ 7, 4 ] ],
        [ [ 6, 4 ], [ 2, 0 ] ],
        [ [ 0, 9 ], [ 2, 9 ] ],
        [ [ 3, 4 ], [ 1, 4 ] ],
        [ [ 0, 0 ], [ 8, 8 ] ],
        [ [ 5, 5 ], [ 8, 2 ] ]
    ];
    const expected = [10,10];
    const res = getMaxs(input);
    assertEquals(expected, res);
})

Deno.test("init grid", () => {
    const res = initGrid([9,9]);
    const expected = [
        [0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0]
    ];
    assertEquals(expected, res);
})

Deno.test("mark grid", () => {
    const grid = [
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0]
    ];
    const coords = [
        [ [ 0, 9 ], [ 5, 9 ] ],
        [ [ 8, 0 ], [ 0, 8 ] ],
        [ [ 9, 4 ], [ 3, 4 ] ],
        [ [ 2, 2 ], [ 2, 1 ] ],
        [ [ 7, 0 ], [ 7, 4 ] ],
        [ [ 6, 4 ], [ 2, 0 ] ],
        [ [ 0, 9 ], [ 2, 9 ] ],
        [ [ 3, 4 ], [ 1, 4 ] ],
        [ [ 0, 0 ], [ 8, 8 ] ],
        [ [ 5, 5 ], [ 8, 2 ] ]
    ];
    markGrid(grid, coords);
    const expected = [
        [0,0,0,0,0,0,0,1,0,0],
        [0,0,1,0,0,0,0,1,0,0],
        [0,0,1,0,0,0,0,1,0,0],
        [0,0,0,0,0,0,0,1,0,0],
        [0,1,1,2,1,1,1,2,1,1],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [2,2,2,1,1,1,0,0,0,0]
    ];
    assertEquals(expected, grid);
})

Deno.test("count grid", () => {
    const grid = [
        [0,0,0,0,0,0,0,1,0,0],
        [0,0,1,0,0,0,0,1,0,0],
        [0,0,1,0,0,0,0,1,0,0],
        [0,0,0,0,0,0,0,1,0,0],
        [0,1,1,2,1,1,1,2,1,1],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [2,2,2,1,1,1,0,0,0,0]
    ];
    const res = countGrid(grid);
    assertEquals(5, res);
})

Deno.test("diag nums", () => {
    const expected = [9,8,7];
    const expected2 = [7,8,9];
    const res = diagNums(9,7);
    const res2 = diagNums(7,9);
    assertEquals(expected, res);
    assertEquals(expected2, res2);
})

Deno.test("mark diagonal", () => {
    const grid = [
        [0,0,0,0,0,0,0,1,0,0],
        [0,0,1,0,0,0,0,1,0,0],
        [0,0,1,0,0,0,0,1,0,0],
        [0,0,0,0,0,0,0,1,0,0],
        [0,1,1,2,1,1,1,2,1,1],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0],
        [2,2,2,1,1,1,0,0,0,0]
    ];
    const coords = [
        [ [ 0, 9 ], [ 5, 9 ] ],
        [ [ 8, 0 ], [ 0, 8 ] ],
        [ [ 9, 4 ], [ 3, 4 ] ],
        [ [ 2, 2 ], [ 2, 1 ] ],
        [ [ 7, 0 ], [ 7, 4 ] ],
        [ [ 6, 4 ], [ 2, 0 ] ],
        [ [ 0, 9 ], [ 2, 9 ] ],
        [ [ 3, 4 ], [ 1, 4 ] ],
        [ [ 0, 0 ], [ 8, 8 ] ],
        [ [ 5, 5 ], [ 8, 2 ] ]
    ];
    const expected = [
        [1,0,1,0,0,0,0,1,1,0],
        [0,1,1,1,0,0,0,2,0,0],
        [0,0,2,0,1,0,1,1,1,0],
        [0,0,0,1,0,2,0,2,0,0],
        [0,1,1,2,3,1,3,2,1,1],
        [0,0,0,1,0,2,0,0,0,0],
        [0,0,1,0,0,0,1,0,0,0],
        [0,1,0,0,0,0,0,1,0,0],
        [1,0,0,0,0,0,0,0,1,0],
        [2,2,2,1,1,1,0,0,0,0]
    ];
    markDiagonal(grid, coords);
    assertEquals(expected, grid);
})